import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { z } from "zod";

// 1. Crear servidor
// es la interfaz princiàl del protocol mcp. maneja comunicacion entre cñliente servidor

const server = new McpServer({
    name: 'Demo',
    version: '1.0.0'
})

//2. Definir herramientas
//permite realizar acciones a travez del servidor

server.tool(
    'fetch-weather', //titulo herramienta
    'Tool to fetch the weather of a city', //descripcion de la herramienta
    {
        city: z.string().describe('City name'), //parametros que recibe la herramienta
    },
    async({city}) =>{
            //lo que queramos que haga con la información
        const response = await fetch('https://geocoding-api.open-meteo.com/v1/search?name=Barcelona&count=10&language=en&format=json')
        const data = await response.json()

        if (data.length === 0) {
                return {
                    content: [{
                        type: 'text',
                        text: 'No se encuentra información para la ${city}'
                    }]
                }
            }
            const {latitude, longitude} = data.results[0]
            const weatherResponse = await fetch('https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&hourly=temperature_2m&current=temperature_2m,precipitation,is_day,rain,apparent_temperature,relative_humidity_2m')
            const weatherData = await weatherResponse.json()

            return {
            content: [
                {
                    type: 'text',
                    text: JSON.stringify(weatherData, null, 2)
                }
            ]
        }
    }
)

//3. Escuchar las conexiones del cliente

const transport = new StdioServerTransport()
await server.connect(transport)